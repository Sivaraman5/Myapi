openapi: "3.0.0"
info:
  title: "LammaPay Customer Information API Specification"
  description: "OpenAPI for LammaPay Customer Information API Specification"
  termsOfService: "https://www.openbanking.org.uk/terms"
  contact:
    name: "Service Desk"
    email: "servicedesk@lamma.om"
  license:
    name: "open-licence"
    url: "https://www.openbanking.org.uk/open-licence"
  version: "3.1.8"
 
paths:

  /v1/customers/by-mobile/{MobileNo}/registered:
    get:
      summary: Check if customer already registers
      tags:
        - "Customers"
      operationId: "IsRegistered"
      parameters:
        - $ref: "#/components/parameters/MobileNo"
        - $ref: "#/components/parameters/x-fapi-auth-date"
        - $ref: "#/components/parameters/x-fapi-customer-ip-address"
        - $ref: "#/components/parameters/x-fapi-interaction-id"
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/x-customer-user-agent"
      description: This API verifies the registration of customer.
      responses:
        200:
          schema:
            $ref: '#/components/responses/CustomerRegistrationResponse'
          description: Successful operation.
        400:
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
          description: <table class="table"><tr><td>Type</td><td>Code</td><td>Details</td></tr><tr><td>invalid</td><td>invalidRequest</td><td>Missing
            or invalid parameters</td></tr></table>
        401:
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
          description: <table class="table"><tr><td>error</td><td>unAuthorized</td><td>Authorization
            credentials are missing or invalid</td></tr></table>
        403:
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
          description: <table class="table"><tr><td>error</td><td>accessNotConfigured</td><td>Access
            is not configured for this resource</td></tr></table>
        404:
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
          description: <table class="table"><tr><td>error</td><td>resourceNotFound</td><td>Empty
            resource/resource not found</td></tr></table>
        500:
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
          description: <table class="table"><tr><td>fatal</td><td>serverUnavailable</td><td>The
            request failed due to an internal error</td></tr></table>
  /v1/customers/by-id/{CustomerId}/terms-and-conditions:
    get:
      summary: Check if customer has already accepted terms and conditions
      tags:
        - "Customers"
      operationId: "IsTermsAndConditionsAccepted"
      parameters:
        - $ref: "#/components/parameters/CustomerId"
        - $ref: "#/components/parameters/x-fapi-auth-date"
        - $ref: "#/components/parameters/x-fapi-customer-ip-address"
        - $ref: "#/components/parameters/x-fapi-interaction-id"
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/x-customer-user-agent"
      description: This API verifies about customer acceptance of terms and condition.
      responses:
        200:
          schema:
            $ref: '#/components/responses/CustomerTermsAndConditionsResponse'
          description: Successful operation.
        400:
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
          description: <table class="table"><tr><td>Type</td><td>Code</td><td>Details</td></tr><tr><td>invalid</td><td>invalidRequest</td><td>Missing
            or invalid parameters</td></tr></table>
        401:
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
          description: <table class="table"><tr><td>error</td><td>unAuthorized</td><td>Authorization
            credentials are missing or invalid</td></tr></table>
        403:
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
          description: <table class="table"><tr><td>error</td><td>accessNotConfigured</td><td>Access
            is not configured for this resource</td></tr></table>
        404:
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
          description: <table class="table"><tr><td>error</td><td>resourceNotFound</td><td>Empty
            resource/resource not found</td></tr></table>
        500:
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
          description: <table class="table"><tr><td>fatal</td><td>serverUnavailable</td><td>The
            request failed due to an internal error</td></tr></table>
    put:
      summary: Update Customer Terms and Conditions
      description: This API updates flag which indicates acceptance of terms and conditions by customer.
      tags:
      - Customers
      operationId: "AcceptanceOfTermsAndConditions"
      parameters:
      - $ref: "#/components/parameters/CustomerId"
      - $ref: "#/components/parameters/x-fapi-auth-date"
      - $ref: "#/components/parameters/x-fapi-customer-ip-address"
      - $ref: "#/components/parameters/x-fapi-interaction-id"
      - $ref: "#/components/parameters/Authorization"
      - $ref: "#/components/parameters/x-customer-user-agent"
      - name: CustomerAcceptanceOfTermsAndConditionsUpdateRequest
        in: body
        required: true
        schema:
          $ref: '#/components/schemas/CustomerTermsAndConditionsUpdateRequest'
      responses:
        200:
          description: Successful operation.
          schema:
            $ref: '#/components/responses/CustomerTermsAndConditionsResponse'
        206:
          description: This is applicable for scenarios when one or more requests
            are failed.
          schema:
            $ref: '#/components/responses/CustomerProfileUpdateResponse'
        400:
          description: <table><tr><td>Type</td><td>Code</td><td>Details</td></tr><tr><td>invalid</td><td>invalidRequest</td><td>Missing
            or invalid parameters</td></tr><tr><td>error</td><td>transactionDenied</td><td>Transaction
            Denied</td></tr><tr><td>error</td><td>customerProfileUpdateFailure</td><td>Customer
            Profile Update Failure</td></tr></table>
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
        401:
          description: <table><tr><td>error</td><td>unAuthorized</td><td>Authorization
            credentials are missing or invalid</td></tr></table>
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
        403:
          description: <table><tr><td>error</td><td>accessNotConfigured</td><td>Access
            is not configured for this resource</td></tr><tr><td>error</td><td>mfaRequired</td><td>MFA
            is required</td></tr></table>
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
        500:
          description: <table><tr><td>fatal</td><td>serverUnavailable</td><td>The
            request failed due to an internal error</td></tr></table>
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
  /v1/customers/by-id/{CustomerId}/pin:
    put:
      summary: Set or reset  pin
      description: This API set or reset PIN by customer
      tags:
      - Customers
      operationId: "ResetPIN"
      parameters:
      - $ref: "#/components/parameters/CustomerId"
      - $ref: "#/components/parameters/x-fapi-auth-date"
      - $ref: "#/components/parameters/x-fapi-customer-ip-address"
      - $ref: "#/components/parameters/x-fapi-interaction-id"
      - $ref: "#/components/parameters/Authorization"
      - $ref: "#/components/parameters/x-customer-user-agent"
      - name: CustomerResetPINRequest
        in: body
        required: true
        schema:
          $ref: '#/components/schemas/CustomerResetPINRequest'
      responses:
        200:
          description: Successful operation.
          schema:
            $ref: '#/components/responses/CustomerResetPINResponse'
        206:
          description: This is applicable for scenarios when one or more requests
            are failed.
          schema:
            $ref: '#/components/responses/CustomerProfileUpdateResponse'
        400:
          description: <table><tr><td>Type</td><td>Code</td><td>Details</td></tr><tr><td>invalid</td><td>invalidRequest</td><td>Missing
            or invalid parameters</td></tr><tr><td>error</td><td>transactionDenied</td><td>Transaction
            Denied</td></tr><tr><td>error</td><td>customerProfileUpdateFailure</td><td>Customer
            Profile Update Failure</td></tr></table>
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
        401:
          description: <table><tr><td>error</td><td>unAuthorized</td><td>Authorization
            credentials are missing or invalid</td></tr></table>
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
        403:
          description: <table><tr><td>error</td><td>accessNotConfigured</td><td>Access
            is not configured for this resource</td></tr><tr><td>error</td><td>mfaRequired</td><td>MFA
            is required</td></tr></table>
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
        500:
          description: <table><tr><td>fatal</td><td>serverUnavailable</td><td>The
            request failed due to an internal error</td></tr></table>
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
  /v1/customers/by-id/{CustomerId}/validate-pin:
    post:
      summary: validate  pin
      description: This API validate PIN entered by Customer
      tags:
      - Customers
      operationId: "ValidatePIN"
      parameters:
      - $ref: "#/components/parameters/CustomerId"
      - $ref: "#/components/parameters/x-fapi-auth-date"
      - $ref: "#/components/parameters/x-fapi-customer-ip-address"
      - $ref: "#/components/parameters/x-fapi-interaction-id"
      - $ref: "#/components/parameters/Authorization"
      - $ref: "#/components/parameters/x-customer-user-agent"
      - name: CustomerValidatePINRequest
        in: body
        required: true
        schema:
          $ref: '#/components/schemas/CustomerValidatePINRequest'
      responses:
        200:
          description: Successful operation.
          schema:
            $ref: '#/components/responses/CustomerValidatePINResponse'
        400:
          description: <table><tr><td>Type</td><td>Code</td><td>Details</td></tr><tr><td>invalid</td><td>invalidRequest</td><td>Missing
            or invalid parameters</td></tr><tr><td>error</td><td>transactionDenied</td><td>Transaction
            Denied</td></tr><tr><td>error</td><td>customerProfileUpdateFailure</td><td>Customer
            Profile Update Failure</td></tr></table>
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
        401:
          description: <table><tr><td>error</td><td>unAuthorized</td><td>Authorization
            credentials are missing or invalid</td></tr></table>
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
        403:
          description: <table><tr><td>error</td><td>accessNotConfigured</td><td>Access
            is not configured for this resource</td></tr><tr><td>error</td><td>mfaRequired</td><td>MFA
            is required</td></tr></table>
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
        500:
          description: <table><tr><td>fatal</td><td>serverUnavailable</td><td>The
            request failed due to an internal error</td></tr></table>
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
  
  /v1/customers/by-id/{CustomerId}/cards:
    get:
      deprecated: true
      description: |-
        <p>You can see a list of the cards belonging to a customer.</p>
      operationId: GetCustomerCards
      parameters:
      - $ref: "#/components/parameters/CustomerId"
      - $ref: "#/components/parameters/x-fapi-auth-date"
      - $ref: "#/components/parameters/x-fapi-customer-ip-address"
      - $ref: "#/components/parameters/x-fapi-interaction-id"
      - $ref: "#/components/parameters/Authorization"
      - $ref: "#/components/parameters/x-customer-user-agent"
      - description: A cursor for use in pagination. `ending_before` is an object
          ID that defines your place in the list. For instance, if you make a list
          request and receive 100 objects, starting with `obj_bar`, your subsequent
          call can include `ending_before=obj_bar` in order to fetch the previous
          page of the list.
        in: query
        name: ending_before
        required: false
        schema:
          type: string
        style: form
      - description: Specifies which fields in the response should be expanded.
        explode: true
        in: query
        name: expand
        required: false
        schema:
          items:
            maxLength: 5000
            type: string
          type: array
        style: deepObject
      - description: A limit on the number of objects to be returned. Limit can range
          between 1 and 100, and the default is 10.
        in: query
        name: limit
        required: false
        schema:
          type: integer
        style: form
      - description: A cursor for use in pagination. `starting_after` is an object
          ID that defines your place in the list. For instance, if you make a list
          request and receive 100 objects, ending with `obj_foo`, your subsequent
          call can include `starting_after=obj_foo` in order to fetch the next page
          of the list.
        in: query
        name: starting_after
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding: {}
            schema:
              additionalProperties: false
              properties: {}
              type: object
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                description: ''
                properties:
                  data:
                    items:
                      "$ref": "#/components/schemas/Card"
                    type: array
                  has_more:
                    description: True if this list has another page of items after
                      this one that can be fetched.
                    type: boolean
                  object:
                    description: String representing the object's type. Objects of
                      the same type share the same value. Always has the value `list`.
                    enum:
                    - list
                    type: string
                  url:
                    description: The URL where this list can be accessed.
                    maxLength: 5000
                    type: string
                required:
                - data
                - has_more
                - object
                - url
                title: CardList
                type: object
                x-expandableFields:
                - data
          description: Successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OBErrorResponse1'
          description: Error response.
    post:
      description: |-
        <p>When you add a new credit card, you must specify a customer or recipient on which to add it.</p>

        <p>If the card’s owner has no default card, then the new card will become the default.
        However, if the owner already has a default, then it will not change.
      operationId: PostCustomersCustomerCards
      parameters:
      - $ref: "#/components/parameters/CustomerId"
      - $ref: "#/components/parameters/x-fapi-auth-date"
      - $ref: "#/components/parameters/x-fapi-customer-ip-address"
      - $ref: "#/components/parameters/x-fapi-interaction-id"
      - $ref: "#/components/parameters/Authorization"
      - $ref: "#/components/parameters/x-customer-user-agent"
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding:
              bank_account:
                explode: true
                style: deepObject
              card:
                explode: true
                style: deepObject
              expand:
                explode: true
                style: deepObject
              metadata:
                explode: true
                style: deepObject
            schema:
              additionalProperties: false
              properties:
                card:
                  anyOf:
                  - properties:
                      address_city:
                        maxLength: 5000
                        type: string
                      address_country:
                        maxLength: 5000
                        type: string
                      address_line1:
                        maxLength: 5000
                        type: string
                      address_line2:
                        maxLength: 5000
                        type: string
                      address_state:
                        maxLength: 5000
                        type: string
                      address_zip:
                        maxLength: 5000
                        type: string
                      cvc:
                        maxLength: 5000
                        type: string
                      exp_month:
                        type: integer
                      exp_year:
                        type: integer
                      metadata:
                        additionalProperties:
                          type: string
                        type: object
                      name:
                        maxLength: 5000
                        type: string
                      number:
                        maxLength: 5000
                        type: string
                      object:
                        enum:
                        - card
                        maxLength: 5000
                        type: string
                    required:
                    - exp_month
                    - exp_year
                    - number
                    title: customer_payment_source_card
                    type: object
                  - maxLength: 5000
                    type: string
                  description: card details.
                  x-stripeBypassValidation: true
                expand:
                  description: Specifies which fields in the response should be expanded.
                  items:
                    maxLength: 5000
                    type: string
                  type: array
                metadata:
                  additionalProperties:
                    type: string
                  description: Set of [key-value pairs]
                    that you can attach to an object. This can be useful for storing
                    additional information about the object in a structured format.
                    Individual keys can be unset by posting an empty value to them.
                    All keys can be unset by posting an empty value to `metadata`.
                  type: object
                source:
                  description: card issuer name.
                  maxLength: 5000
                  type: string
              type: object
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Card"
          description: Successful response.
        default:
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OBErrorResponse1"
          description: Error response.
  /v1/customers/{CustomerId}/cards/{id}:
    delete:
      description: "<p>Delete a specified source for a given customer.</p>"
      operationId: DeleteCustomerCardsId
      parameters:
      - $ref: "#/components/parameters/CustomerId"
      - $ref: "#/components/parameters/x-fapi-auth-date"
      - $ref: "#/components/parameters/x-fapi-customer-ip-address"
      - $ref: "#/components/parameters/x-fapi-interaction-id"
      - $ref: "#/components/parameters/Authorization"
      - $ref: "#/components/parameters/x-customer-user-agent"
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding:
              expand:
                explode: true
                style: deepObject
            schema:
              additionalProperties: false
              properties:
                expand:
                  description: Specifies which fields in the response should be expanded.
                  items:
                    maxLength: 5000
                    type: string
                  type: array
              type: object
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                anyOf:
                - "$ref": "#/components/schemas/Card"
                - "$ref": "#/components/schemas/Deleted_Card"
          description: Successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OBErrorResponse1'
          description: Error response.
    get:
      deprecated: true
      description: "<p>You can always see the 10 most recent cards directly on a customer;
        this method lets you retrieve details about a specific card stored on the
        customer.</p>"
      operationId: GetCustomersCardsId
      parameters:
      - $ref: "#/components/parameters/CustomerId"
      - $ref: "#/components/parameters/x-fapi-auth-date"
      - $ref: "#/components/parameters/x-fapi-customer-ip-address"
      - $ref: "#/components/parameters/x-fapi-interaction-id"
      - $ref: "#/components/parameters/Authorization"
      - $ref: "#/components/parameters/x-customer-user-agent"
      - description: Specifies which fields in the response should be expanded.
        explode: true
        in: query
        name: expand
        required: false
        schema:
          items:
            maxLength: 5000
            type: string
          type: array
        style: deepObject
      - in: path
        name: id
        required: true
        schema:
          maxLength: 5000
          type: string
        style: simple
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding: {}
            schema:
              additionalProperties: false
              properties: {}
              type: object
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Card"
          description: Successful response.
        default:
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OBErrorResponse1"
          description: Error response.
    post:
      description: "<p>Update a specified card for a given customer.</p>"
      operationId: PostCustomersCardsId
      parameters:
      - $ref: "#/components/parameters/CustomerId"
      - $ref: "#/components/parameters/x-fapi-auth-date"
      - $ref: "#/components/parameters/x-fapi-customer-ip-address"
      - $ref: "#/components/parameters/x-fapi-interaction-id"
      - $ref: "#/components/parameters/Authorization"
      - $ref: "#/components/parameters/x-customer-user-agent"
      - in: path
        name: id
        required: true
        schema:
          maxLength: 5000
          type: string
        style: simple
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding:
              expand:
                explode: true
                style: deepObject
              metadata:
                explode: true
                style: deepObject
              owner:
                explode: true
                style: deepObject
            schema:
              additionalProperties: false
              properties:
                account_holder_name:
                  description: The name of the person or business that owns the bank
                    account.
                  maxLength: 5000
                  type: string
                account_holder_type:
                  description: The type of entity that holds the account. This can
                    be either `individual` or `company`.
                  enum:
                  - company
                  - individual
                  maxLength: 5000
                  type: string
                address_city:
                  description: City/District/Suburb/Town/Village.
                  maxLength: 5000
                  type: string
                address_country:
                  description: Billing address country, if provided when creating
                    card.
                  maxLength: 5000
                  type: string
                address_line1:
                  description: Address line 1 (Street address/PO Box/Company name).
                  maxLength: 5000
                  type: string
                address_line2:
                  description: Address line 2 (Apartment/Suite/Unit/Building).
                  maxLength: 5000
                  type: string
                address_state:
                  description: State/County/Province/Region.
                  maxLength: 5000
                  type: string
                address_zip:
                  description: ZIP or postal code.
                  maxLength: 5000
                  type: string
                exp_month:
                  description: Two digit number representing the card’s expiration
                    month.
                  maxLength: 5000
                  type: string
                exp_year:
                  description: Four digit number representing the card’s expiration
                    year.
                  maxLength: 5000
                  type: string
                expand:
                  description: Specifies which fields in the response should be expanded.
                  items:
                    maxLength: 5000
                    type: string
                  type: array
                metadata:
                  anyOf:
                  - additionalProperties:
                      type: string
                    type: object
                  - enum:
                    - ''
                    type: string
                  description: Set of [key-value pairs] that you can attach to an object. This can be useful for storing
                    additional information about the object in a structured format.
                    Individual keys can be unset by posting an empty value to them.
                    All keys can be unset by posting an empty value to `metadata`.
                name:
                  description: Cardholder name.
                  maxLength: 5000
                  type: string
                owner:
                  properties:
                    address:
                      properties:
                        city:
                          maxLength: 5000
                          type: string
                        country:
                          maxLength: 5000
                          type: string
                        line1:
                          maxLength: 5000
                          type: string
                        line2:
                          maxLength: 5000
                          type: string
                        postal_code:
                          maxLength: 5000
                          type: string
                        state:
                          maxLength: 5000
                          type: string
                      title: source_address
                      type: object
                    email:
                      type: string
                    name:
                      maxLength: 5000
                      type: string
                    phone:
                      maxLength: 5000
                      type: string
                  title: owner
                  type: object
              type: object
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                anyOf:
                - "$ref": "#/components/schemas/card"
          description: Successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OBErrorResponse1'
          description: <table class="table"><tr><td>Type</td><td>Code</td><td>Details</td></tr><tr><td>invalid</td><td>invalidRequest</td><td>Missing
            or invalid parameters</td></tr></table>
  

  /v1/customers/by-id/{CustomerId}/profiles:
    get:
      summary: Retrieve Customer Personal Details
      tags:
        - "Customers"
      operationId: "GetCustomerProfiles"
      parameters:
        - $ref: "#/components/parameters/CustomerId"
        - $ref: "#/components/parameters/x-fapi-auth-date"
        - $ref: "#/components/parameters/x-fapi-customer-ip-address"
        - $ref: "#/components/parameters/x-fapi-interaction-id"
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/x-customer-user-agent"
      description: This API is used to retrieve customer details including personal
        particulars, address, phone number and email details.
      responses:
        200:
          schema:
            $ref: '#/components/responses/CustomerProfileResponse'
          description: Successful operation.
        400:
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
          description: <table class="table"><tr><td>Type</td><td>Code</td><td>Details</td></tr><tr><td>invalid</td><td>invalidRequest</td><td>Missing
            or invalid parameters</td></tr></table>
        401:
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
          description: <table class="table"><tr><td>error</td><td>unAuthorized</td><td>Authorization
            credentials are missing or invalid</td></tr></table>
        403:
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
          description: <table class="table"><tr><td>error</td><td>accessNotConfigured</td><td>Access
            is not configured for this resource</td></tr></table>
        404:
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
          description: <table class="table"><tr><td>error</td><td>resourceNotFound</td><td>Empty
            resource/resource not found</td></tr></table>
        500:
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
          description: <table class="table"><tr><td>fatal</td><td>serverUnavailable</td><td>The
            request failed due to an internal error</td></tr></table>
    put:
      summary: Update Customer Personal Details
      description: This API is used to update customer details including address,
        phone number and email details.
      tags:
      - Customers
      operationId: "UpdateCustomerProfiles"
      parameters:
      - $ref: "#/components/parameters/CustomerId"
      - $ref: "#/components/parameters/x-fapi-auth-date"
      - $ref: "#/components/parameters/x-fapi-customer-ip-address"
      - $ref: "#/components/parameters/x-fapi-interaction-id"
      - $ref: "#/components/parameters/Authorization"
      - $ref: "#/components/parameters/x-customer-user-agent"
      - name: CustomerProfileUpdateRequest
        in: body
        required: true
        schema:
          $ref: '#/components/schemas/CustomerProfileUpdateRequest'
      responses:
        200:
          description: Successful operation.
          schema:
            $ref: '#/components/responses/CustomerProfileUpdateResponse'
        206:
          description: This is applicable for scenarios when one or more requests
            are failed.
          schema:
            $ref: '#/components/responses/CustomerProfileUpdateResponse'
        400:
          description: <table><tr><td>Type</td><td>Code</td><td>Details</td></tr><tr><td>invalid</td><td>invalidRequest</td><td>Missing
            or invalid parameters</td></tr><tr><td>error</td><td>transactionDenied</td><td>Transaction
            Denied</td></tr><tr><td>error</td><td>customerProfileUpdateFailure</td><td>Customer
            Profile Update Failure</td></tr></table>
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
        401:
          description: <table><tr><td>error</td><td>unAuthorized</td><td>Authorization
            credentials are missing or invalid</td></tr></table>
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
        403:
          description: <table><tr><td>error</td><td>accessNotConfigured</td><td>Access
            is not configured for this resource</td></tr><tr><td>error</td><td>mfaRequired</td><td>MFA
            is required</td></tr></table>
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
        500:
          description: <table><tr><td>fatal</td><td>serverUnavailable</td><td>The
            request failed due to an internal error</td></tr></table>
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
  /v1/customers/by-id/{CustomerId}/profiles/addresses:
    get:
      tags:
        - "Customers"
      operationId: "GetCustomerAddresses"
      summary: Retrieve Customer Address Details
      parameters:
        - $ref: "#/components/parameters/CustomerId"
        - $ref: "#/components/parameters/x-fapi-auth-date"
        - $ref: "#/components/parameters/x-fapi-customer-ip-address"
        - $ref: "#/components/parameters/x-fapi-interaction-id"
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/x-customer-user-agent"
      description: This API is used to retrieve customer home address details.
      responses:
        200:
          schema:
            $ref: '#/components/responses/CustomerAddressResponse'
          description: Successful operation.
        400:
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
          description: <table class="table"><tr><td>Type</td><td>Code</td><td>Details</td></tr><tr><td>invalid</td><td>invalidRequest</td><td>Missing
            or invalid parameters</td></tr></table>
        401:
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
          description: <table class="table"><tr><td>error</td><td>unAuthorized</td><td>Authorization
            credentials are missing or invalid</td></tr></table>
        403:
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
          description: <table class="table"><tr><td>error</td><td>accessNotConfigured</td><td>Access
            is not configured for this resource</td></tr></table>
        404:
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
          description: <table class="table"><tr><td>error</td><td>resourceNotFound</td><td>Empty
            resource/resource not found</td></tr></table>
        500:
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
          description: <table class="table"><tr><td>fatal</td><td>serverUnavailable</td><td>The
            request failed due to an internal error</td></tr></table>  
    post:
      summary: Update Customer Address Details
      operationId: "UpdateCustomerAddress"
      description: This API is used to update customer address details and it also
        allows to add in specific case.
      tags:
      - Customer Service
      parameters:
        - $ref: "#/components/parameters/CustomerId"
        - $ref: "#/components/parameters/x-fapi-auth-date"
        - $ref: "#/components/parameters/x-fapi-customer-ip-address"
        - $ref: "#/components/parameters/x-fapi-interaction-id"
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/x-customer-user-agent"  
        - name: CustomerAddressUpdateRequest
          required: true
          description: Request
          in: body
          schema:
            $ref: '#/components/schemas/CustomerAddressUpdateRequest'
      responses:
        200:
          description: Successful operation.
        400:
          description: <table><tr><td>Type</td><td>Code</td><td>Details</td></tr><tr><td>invalid</td><td>invalidRequest</td><td>Missing
            or invalid Parameters</td></tr><tr><td>error</td><td>exceededMaximumAllowedAddresses</td><td>Exceeded
            maximum allowed addresses</td></tr><tr><td>error</td><td>addressAdditionFailed</td><td>Addition
            of address is not supported</td></tr></table>
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
        401:
          description: <table><tr><td>error</td><td>unAuthorized</td><td>Authorization
            credentials are missing or invalid</td></tr></table>
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
        403:
          description: <table><tr><td>error</td><td>accessNotConfigured</td><td>The
            request operation is not configured to access this resource</td></tr><tr><td>error</td><td>mfaRequired</td><td>MFA
            is required</td></tr><tr><td>error</td><td>transactionDenied</td><td>Transaction
            Denied</td></tr><tr><td>error</td><td>phoneNumberInCoolOffPeriod</td><td>Mobile
            number is in cool off period</td></tr></table>
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
        500:
          description: <table><tr><td>fatal</td><td>serverUnavailable</td><td>The
            request failed due to an internal error</td></tr></table>
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
  /v1/customers/by-id/{CustomerId}/profiles/basic:
    get:
      summary: Retrieve Customer Particulars
      operationId: "GetCustomerProfilesBasic"
      parameters:
      - $ref: "#/components/parameters/CustomerId"
      - $ref: "#/components/parameters/x-fapi-auth-date"
      - $ref: "#/components/parameters/x-fapi-customer-ip-address"
      - $ref: "#/components/parameters/x-fapi-interaction-id"
      - $ref: "#/components/parameters/Authorization"
      - $ref: "#/components/parameters/x-customer-user-agent"
      description: This API is used to retrieve customer particulars including name,
        surname, prefix and suffix.
      responses:
        200:
          schema:
            $ref: '#/components/responses/CustomerParticularResponse'
          description: Successful operation.
        400:
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
          description: <table class="table"><tr><td>Type</td><td>Code</td><td>Details</td></tr><tr><td>invalid</td><td>invalidRequest</td><td>Missing
            or invalid parameters</td></tr></table>
        401:
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
          description: <table class="table"><tr><td>error</td><td>unAuthorized</td><td>Authorization
            credential is missing or invalid</td></tr></table>
        403:
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
          description: <table class="table"><tr><td>error</td><td>accessNotConfigured</td><td>Access
            is not configured for this resource</td></tr></table>
        404:
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
          description: <table class="table"><tr><td>error</td><td>resourceNotFound</td><td>Empty
            resource/resource not found</td></tr></table>
        500:
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
          description: <table class="table"><tr><td>fatal</td><td>serverUnavailable</td><td>The
            request failed due to an internal error</td></tr></table>
  /v1/customers/by-id/{CustomerId}/profiles/emails:
    get:
      summary: Retrieve Customer Email
      tags:
      - Customer Service
      operationId: "RetrieveCustomerEmails"
      description: This API is used to retrieve customer email address details.
      parameters:
        - $ref: "#/components/parameters/CustomerId"
        - $ref: "#/components/parameters/x-fapi-auth-date"
        - $ref: "#/components/parameters/x-fapi-customer-ip-address"
        - $ref: "#/components/parameters/x-fapi-interaction-id"
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/x-customer-user-agent"
      responses:
        200:
          schema:
            $ref: '#/components/responses/CustomerEmailResponse'
          description: Successful operation.
        400:
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
          description: <table class="table"><tr><td>Type</td><td>Code</td><td>Details</td></tr><tr><td>invalid</td><td>invalidRequest</td><td>Missing
            or invalid parameters</td></tr></table>
        401:
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
          description: <table class="table"><tr><td>error</td><td>unAuthorized</td><td>Authorization
            credential is missing or invalid</td></tr></table>
        403:
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
          description: <table class="table"><tr><td>error</td><td>accessNotConfigured</td><td>Access
            is not configured for this resource</td></tr></table>
        404:
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
          description: <table class="table"><tr><td>error</td><td>resourceNotFound</td><td>Empty
            resource/resource not found</td></tr></table>
        500:
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
          description: <table class="table"><tr><td>fatal</td><td>serverUnavailable</td><td>The
            request failed due to an internal error</td></tr></table>
    put:
      summary: Update Customer Email
      operationId: "UpdateCustomerEmails"
      description: This API is used to update customer's email address.
      tags:
      - Customer Service
      parameters:
        - $ref: "#/components/parameters/CustomerId"
        - $ref: "#/components/parameters/x-fapi-auth-date"
        - $ref: "#/components/parameters/x-fapi-customer-ip-address"
        - $ref: "#/components/parameters/x-fapi-interaction-id"
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/x-customer-user-agent" 
        - name: CustomerEmailUpdateRequest
          required: true
          in: body
          schema:
            $ref: '#/components/responses/CustomerEmailUpdateRequest'
      responses:
        200:
          description: Successful operation.
        400:
          description: <table><tr><td>Type</td><td>Code</td><td>Details</td></tr><tr><td>invalid</td><td>invalidRequest</td><td>Missing
            or invalid Parameters</td></tr><tr><td>error</td><td>exceededMaximumAllowedEmails</td><td>Exceeded
            maximum allowed emails</td></tr><tr><td>error</td><td>phoneNumberInCoolOffPeriod</td><td>Mobile
            number is in cool off period</td></tr></table>
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
        401:
          description: <table><tr><td>error</td><td>unAuthorized</td><td>Authorization
            credentials are missing or invalid</td></tr></table>
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
        403:
          description: <table><tr><td>error</td><td>accessNotConfigured</td><td>The
            request operation is not configured to access this resource</td></tr><tr><td>error</td><td>mfaRequired</td><td>MFA
            is required</td></tr></table>
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
        404:
          description: <table><tr><td>error</td><td>resourceNotFound</td><td>Empty
            resource/resource not found</td></tr></table>
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
        500:
          description: <table><tr><td>fatal</td><td>serverUnavailable</td><td>The
            request failed due to an internal error</td></tr></table>
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
  /v1/customers/by-id/{CustomerId}/profiles/phoneNumbers:
    get:
      summary: Retrieve Customer Phone Number
      operationId: "GetCustomerPhoneNumbers"
      tags:
      - Customer Service
      description: This API is used to retrieve customer's home, office and mobile
        phone numbers.
      parameters:
        - $ref: "#/components/parameters/CustomerId"
        - $ref: "#/components/parameters/x-fapi-auth-date"
        - $ref: "#/components/parameters/x-fapi-customer-ip-address"
        - $ref: "#/components/parameters/x-fapi-interaction-id"
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/x-customer-user-agent"
      responses:
        200:
          schema:
            $ref: '#/components/schemas/CustomerPhoneResponse'
          description: Successful operation.
        400:
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
          description: <table class="table"><tr><td>Type</td><td>Code</td><td>Details</td></tr><tr><td>invalid</td><td>invalidRequest</td><td>Missing
            or invalid parameters</td></tr></table>
        401:
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
          description: <table class="table"><tr><td>error</td><td>unAuthorized</td><td>Authorization
            credential is missing or invalid</td></tr></table>
        403:
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
          description: <table class="table"><tr><td>error</td><td>accessNotConfigured</td><td>Access
            is not configured for this resource</td></tr></table>
        404:
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
          description: <table class="table"><tr><td>error</td><td>resourceNotFound</td><td>Empty
            resource/resource not found</td></tr></table>
        500:
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
          description: <table class="table"><tr><td>fatal</td><td>serverUnavailable</td><td>The
            request failed due to an internal error</td></tr></table>
    put:
      summary: Update Customer Phone Number
      operationId: "UpdateCustomerPhoneNumbers"
      description: This API is used to update customer's phone numbers which include
        home, office and mobile.
      tags:
      - Customer Service
      parameters:
        - $ref: "#/components/parameters/CustomerId"
        - $ref: "#/components/parameters/x-fapi-auth-date"
        - $ref: "#/components/parameters/x-fapi-customer-ip-address"
        - $ref: "#/components/parameters/x-fapi-interaction-id"
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/x-customer-user-agent" 
        - name: CustomerPhoneUpdateRequest
          required: true
          in: body
          schema:
            $ref: '#/components/schemas/CustomerPhoneUpdateRequest'
      responses:
        200:
          description: Successful operation.
        400:
          description: <table><tr><td>Type</td><td>Code</td><td>Details</td></tr><tr><td>invalid</td><td>invalidRequest</td><td>Missing
            or invalid Parameters</td></tr><tr><td>error</td><td>exceededMaximumAllowedPhones</td><td>Exceeded
            maximum allowed phones</td></tr><tr><td>error</td><td>phoneNumberInCoolOffPeriod</td><td>Mobile
            number is in cool off period</td></tr></table>
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
        401:
          description: <table><tr><td>error</td><td>unAuthorized</td><td>Authorization
            credentials are missing or invalid</td></tr></table>
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
        403:
          description: <table><tr><td>error</td><td>accessNotConfigured</td><td>The
            request operation is not configured to access this resource</td></tr><tr><td>error</td><td>mfaRequired</td><td>MFA
            is required</td></tr></table>
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
        404:
          description: <table><tr><td>error</td><td>resourceNotFound</td><td>Empty
            resource/resource not found</td></tr></table>
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
        500:
          description: <table><tr><td>fatal</td><td>serverUnavailable</td><td>The
            request failed due to an internal error</td></tr></table>
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
  /v1/customers/by-id/{CustomerId}/profiles/phoneNumbers/confirmation:
    post:
      summary: Confirm Customer Phone Number Update
      operationId: "ConfirmCustomerPhoneNumbers"
      description: This API is required to confirm the customer’s phone number updates.
        This is triggered after the successful multi factor authentication.
      tags:
      - Customer Service
      parameters:
        - $ref: "#/components/parameters/CustomerId"
        - $ref: "#/components/parameters/x-fapi-auth-date"
        - $ref: "#/components/parameters/x-fapi-customer-ip-address"
        - $ref: "#/components/parameters/x-fapi-interaction-id"
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/x-customer-user-agent" 
        - name: CustomerPhoneUpdateConfirmationRequest
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/CustomerPhoneUpdateConfirmationRequest'
      responses:
        200:
          description: Successful operation.
        400:
          description: <table><tr><td>Type</td><td>Code</td><td>Details</td></tr><tr><td>invalid</td><td>invalidRequest</td><td>Missing
            or invalid parameters</td></tr><tr><td>error</td><td>invalidControlFlowId</td><td>Control
            Flow Id is invalid</td></tr></table>
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
        401:
          description: <table><tr><td>error</td><td>unAuthorized</td><td>Authorization
            credentials are missing or invalid</td></tr></table>
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
        403:
          description: <table><tr><td>error</td><td>accessNotConfigured</td><td>Access
            is not configured for this resource</td></tr><tr><td>error</td></table>
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
        500:
          description: <table><tr><td>fatal</td><td>serverUnavailable</td><td>The
            request failed due to an internal error</td></tr></table>
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
  /v1/customers/by-id/{CustomerId}/profiles/emails/confirmation:
    post:
      summary: Confirm Customer Email Update
      description: This API is required to confirm the customer’s email address updates.
        This is triggered after the successful multi factor authentication.
      operationId: "ConfirmCustomerEmailUpdate"
      tags:
      - Customer Service
      parameters:
        - $ref: "#/components/parameters/CustomerId"
        - $ref: "#/components/parameters/x-fapi-auth-date"
        - $ref: "#/components/parameters/x-fapi-customer-ip-address"
        - $ref: "#/components/parameters/x-fapi-interaction-id"
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/x-customer-user-agent" 
        - name: CustomerEmailUpdateConfirmationRequest
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/CustomerEmailUpdateConfirmationRequest'
      responses:
        200:
          description: Successful operation.
        400:
          description: <table><tr><td>Type</td><td>Code</td><td>Details</td></tr><tr><td>invalid</td><td>invalidRequest</td><td>Missing
            or invalid parameters</td></tr><tr><td>error</td><td>invalidControlFlowId</td><td>Control
            Flow Id is invalid</td></tr></table>
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
        401:
          description: <table><tr><td>error</td><td>unAuthorized</td><td>Authorization
            credentials are missing or invalid</td></tr></table>
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
        403:
          description: <table><tr><td>error</td><td>accessNotConfigured</td><td>Access
            is not configured for this resource</td></tr></table>
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
        500:
          description: <table><tr><td>fatal</td><td>serverUnavailable</td><td>The
            request failed due to an internal error</td></tr></table>
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
  /v1/mfa/otp:
    post:
      summary: Generate and Send OTP
      operationId: "generateOTP"
      description: This API allows to generate the one time password and delivers
        to customer.
      tags:
      - MFA
      parameters:
        - $ref: "#/components/parameters/x-fapi-auth-date"
        - $ref: "#/components/parameters/x-fapi-customer-ip-address"
        - $ref: "#/components/parameters/x-fapi-interaction-id"
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/x-customer-user-agent"
        - name: GeneratOTPRequest
          in: body
          description: OTP request with required details to generate and send OTP to
            customer.
          required: true
          schema:
            $ref: '#/components/schemas/GenerateOTPRequest'
      responses:
        200:
          description: Successful operation.
          schema:
            $ref: '#/components/responses/GenerateOTPResponse'
        400:
          description: <table><tr><td>Type</td><td>Code</td><td>Details</td></tr><tr><td>invalid</td><td>invalidRequest</td><td>Missing
            or invalid Parameters</td></tr><tr><td>error</td><td>maximumAttemptsLimitExceeded</td><td>Max
            Attempt count reached</td></tr><tr><td>error</td><td>phoneNumberNotFound</td><td>Missing
            mobile phone number</td></tr><tr><td>error</td><td>smsDeliveryFailed</td><td>SMS
            delivery failed</td></tr></table>
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
        401:
          description: <table><tr><td>error</td><td>unAuthorized</td><td>Authorization
            credential is missing or invalid</td></tr></table>
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
        403:
          description: <table><tr><td>error</td><td>accessNotConfigured</td><td>Access
            is not configured for this resource</td></tr></table>
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
        500:
          description: <table><tr><td>fatal</td><td>serverUnavailable</td><td>The
            request failed due to an internal error</td></tr></table>
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
    put:
      summary: Validate OTP
      description: This API validates the OTP token submitted by the customer.
      operationId: "validateOTP"
      tags:
      - MFA
      parameters:
        - $ref: "#/components/parameters/x-fapi-auth-date"
        - $ref: "#/components/parameters/x-fapi-customer-ip-address"
        - $ref: "#/components/parameters/x-fapi-interaction-id"
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/x-customer-user-agent"
        - name: ValidateOTPRequest
          in: body
          description: Otp request with the required details to validate otp token.
          required: true
          schema:
            $ref: '#/components/schemas/ValidateOTPRequest'
      responses:
        200:
          description: Successful operation.
        400:
          description: <table><tr><td>Type</td><td>Code</td><td>Details</td></tr><tr><td>invalid</td><td>invalidRequest</td><td>Missing
            or invalid Parameters</td></tr><tr><td>error</td><td>invalidOTP</td><td>Invalid
            OTP</td></tr><tr><td>error</td><td>maximumAttemptsLimitExceeded</td><td>Max
            number of one-time password failures exceeded</td></tr><tr><td>error</td><td>otpTokenExpired</td><td>OTP
            Token Expired</td></tr></table>
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
        401:
          description: <table><tr><td>error</td><td>unAuthorized</td><td>Authorization
            credential is missing or invalid</td></tr></table>
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
        403:
          description: <table><tr><td>error</td><td>accessNotConfigured</td><td>Access
            is not configured for this resource</td></tr></table>
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
        500:
          description: <table><tr><td>fatal</td><td>serverUnavailable</td><td>The
            request failed due to an internal error</td></tr></table>
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
  /v1/customers/by-id/{CustomerId}/profiles/alias:
    get:
      summary: Retrieve Customer alias
      tags:
      - Customer Service
      operationId: "RetrieveCustomerAlias"
      description: This API is used to retrieve customer alias.
      parameters:
        - $ref: "#/components/parameters/CustomerId"
        - $ref: "#/components/parameters/x-fapi-auth-date"
        - $ref: "#/components/parameters/x-fapi-customer-ip-address"
        - $ref: "#/components/parameters/x-fapi-interaction-id"
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/x-customer-user-agent"
      responses:
        200:
          schema:
            $ref: '#/components/responses/CustomerAliasResponse'
          description: Successful operation.
        400:
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
          description: <table class="table"><tr><td>Type</td><td>Code</td><td>Details</td></tr><tr><td>invalid</td><td>invalidRequest</td><td>Missing
            or invalid parameters</td></tr></table>
        401:
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
          description: <table class="table"><tr><td>error</td><td>unAuthorized</td><td>Authorization
            credential is missing or invalid</td></tr></table>
        403:
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
          description: <table class="table"><tr><td>error</td><td>accessNotConfigured</td><td>Access
            is not configured for this resource</td></tr></table>
        404:
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
          description: <table class="table"><tr><td>error</td><td>resourceNotFound</td><td>Empty
            resource/resource not found</td></tr></table>
        500:
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
          description: <table class="table"><tr><td>fatal</td><td>serverUnavailable</td><td>The
            request failed due to an internal error</td></tr></table>
    put:
      summary: Update Customer Alias
      operationId: "UpdateCustomerAlias"
      description: This API is used to update customer's alias and verify.
      tags:
      - Customer Service
      parameters:
        - $ref: "#/components/parameters/CustomerId"
        - $ref: "#/components/parameters/x-fapi-auth-date"
        - $ref: "#/components/parameters/x-fapi-customer-ip-address"
        - $ref: "#/components/parameters/x-fapi-interaction-id"
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/x-customer-user-agent" 
        - name: CustomerEmailUpdateRequest
          required: true
          in: body
          schema:
            $ref: '#/components/responses/CustomerAliasUpdateRequest'
      responses:
        200:
          description: Successful operation.
        400:
          description: <table><tr><td>Type</td><td>Code</td><td>Details</td></tr><tr><td>invalid</td><td>invalidRequest</td><td>Missing
            or invalid Parameters</td></tr><tr><td>error</td><td>exceededMaximumAllowedEmails</td><td>Exceeded
            maximum allowed emails</td></tr><tr><td>error</td><td>phoneNumberInCoolOffPeriod</td><td>Mobile
            number is in cool off period</td></tr></table>
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
        401:
          description: <table><tr><td>error</td><td>unAuthorized</td><td>Authorization
            credentials are missing or invalid</td></tr></table>
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
        403:
          description: <table><tr><td>error</td><td>accessNotConfigured</td><td>The
            request operation is not configured to access this resource</td></tr><tr><td>error</td><td>mfaRequired</td><td>MFA
            is required</td></tr></table>
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
        404:
          description: <table><tr><td>error</td><td>resourceNotFound</td><td>Empty
            resource/resource not found</td></tr></table>
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
        500:
          description: <table><tr><td>fatal</td><td>serverUnavailable</td><td>The
            request failed due to an internal error</td></tr></table>
          schema:
            $ref: '#/components/schemas/OBErrorResponse1'
  
servers:
  - url: "/lamma-pay/v1.0/pisp"
components:
  parameters:
    FromBookingDateTimeParam:
      in: "query"
      name: "fromBookingDateTime"
      description: "The UTC ISO 8601 Date Time to filter transactions FROM\nNB Time component is optional - set to 00:00:00 for just Date.\nIf the Date Time contains a timezone, the ASPSP must ignore the timezone component."
      schema:
        type: "string"
        format: "date-time"
    ToBookingDateTimeParam:
      in: "query"
      name: "toBookingDateTime"
      description: "The UTC ISO 8601 Date Time to filter transactions TO\nNB Time component is optional - set to 00:00:00 for just Date.\nIf the Date Time contains a timezone, the ASPSP must ignore the timezone component."
      schema:
        type: "string"
        format: "date-time"
    FromStatementDateTimeParam:
      in: "query"
      name: "fromStatementDateTime"
      description: "The UTC ISO 8601 Date Time to filter statements FROM\nNB Time component is optional - set to 00:00:00 for just Date.\nIf the Date Time contains a timezone, the ASPSP must ignore the timezone component."
      schema:
        type: "string"
        format: "date-time"
    ToStatementDateTimeParam:
      in: "query"
      name: "toStatementDateTime"
      description: "The UTC ISO 8601 Date Time to filter statements TO\nNB Time component is optional - set to 00:00:00 for just Date.\nIf the Date Time contains a timezone, the ASPSP must ignore the timezone component."
      schema:
        type: "string"
        format: "date-time"
    ConsentId:
      name: "ConsentId"
      in: "path"
      description: "ConsentId"
      required: true
      schema:
        type: "string"
    CustomerId:
      name: "CustomerId"
      in: "path"
      description: "CustomerId"
      required: true
      schema:
        type: "string"
    MobileNo:
      name: "MobileNo"
      in: "path"
      description: "Mobile No to verify the registration of customer"
      required: true
      schema:
        type: "string"
    AccountId:
      name: "AccountId"
      in: "path"
      description: "AccountId"
      required: true
      schema:
        type: "string"
    StatementId:
      name: "StatementId"
      in: "path"
      description: "StatementId"
      required: true
      schema:
        type: "string"
    Authorization:
      in: "header"
      name: "Authorization"
      required: true
      description: "An Authorisation Token as per https://tools.ietf.org/html/rfc6750"
      schema:
        type: "string"
    x-customer-user-agent:
      in: "header"
      name: "x-customer-user-agent"
      description: "Indicates the user-agent that the PSU is using."
      required: false
      schema:
        type: "string"
    x-fapi-customer-ip-address:
      in: "header"
      name: "x-fapi-customer-ip-address"
      required: false
      description: "The PSU's IP address if the PSU is currently logged in with the TPP."
      schema:
        type: "string"
    x-fapi-auth-date:
      in: "header"
      name: "x-fapi-auth-date"
      required: false
      description: "The time when the PSU last logged in with the TPP. \nAll dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: \nSun, 10 Sep 2017 19:43:31 UTC"
      schema:
        type: "string"
        pattern: "^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$"
    x-fapi-interaction-id:
      in: "header"
      name: "x-fapi-interaction-id"
      required: false
      description: "An RFC4122 UID used as a correlation id."
      schema:
        type: "string"
    x-idempotency-key:
      name: "x-idempotency-key"
      in: "header"
      description: "Every request will be processed only once per x-idempotency-key.  The\nIdempotency Key will be valid for 24 hours.\n"
      required: true
      schema:
        type: "string"
        maxLength: 40
        pattern: "^(?!\\s)(.*)(\\S)$"
    x-jws-signature:
      in: "header"
      name: "x-jws-signature"
      required: true
      description: "A detached JWS signature of the body of the payload."
      schema:
        type: "string"
  responses:
    CustomerProfileResponse:
      properties:
        emails:
          type: array
          items:
            $ref: '#/components/schemas/Email'
        customerType:
          description: Type of the customer. This is applicable only for Individual
            customers.This is a reference data field.
          type: string
          example: INDIVIDUAL
        customerParticulars:
          $ref: '#/components/schemas/CustomerParticulars'
        customerSegment:
          description: Type of the customer. This is applicable only for Individual
            customers.This is a reference data field. You can use
            customerSegment as the referenceCode parameter to retrieve the values.
          type: string
          example: BLUE
        partnerCustomerSegment:
          description: Partner customer segment. This is a reference data field.
          type: string
          example: AD1
        addressList:
          type: array
          items:
            $ref: '#/components/schemas/Address'
        phones:
          type: array
          items:
            $ref: '#/components/schemas/Phone'
      required:
      - customerSegment
    CustomerProfileUpdateResponse:
      properties:
        profileUpdateStatus:
          type: array
          items:
            $ref: '#/components/responses/ProfileUpdateStatus'
    ProfileUpdateStatus:
      properties:
        profileUpdateStatusCode:
          description: This is the status code of the customer profile update. 
          type: string
          example: EMAIL_AND_PHONE_UPDATE_SUCCESS
        profileUpdateFailureReason:
          description: This field is to indicate the reason of the failure of profile
            update. Applicable only incase any error in profile updates.
          type: string
          example: E-mail update failed
      required:
      - profileUpdateStatusCode
    CustomerAddressResponse:
      properties:
        addressList:
          type: array
          items:
            $ref: '#/components/schemas/Address'
      required:
      - addressList
    CustomerParticularResponse:
      properties:
        customerType:
          description: Type of the customer. This is applicable only for Individual
            customers.This is a reference data field.
          type: string
          example: INDIVIDUAL
        customerParticulars:
          $ref: '#/components/schemas/CustomerParticulars'
        customerSegment:
          description: Type of the customer. This is applicable only for Individual
            customers.This is a reference data field.
          type: string
          example: BLUE
        partnerCustomerSegment:
          description: Partner customer segment.This is a reference data field.
          type: string
          example: AD1
    CustomerEmailUpdateRequest:
      properties:
        email:
          type: array
          items:
            $ref: '#/components/schemas/Email'
      required:
      - email
    CustomerEmailResponse:
      properties:
        emails:
          type: array
          items:
            $ref: '#/definitions/Email'
      required:
      - emails
    CustomerAliasResponse:
      properties:
        alias:
          type: array
          items:
            $ref: '#/definitions/Alias'
      required:
      - alias
    CustomerPhoneResponse:
      properties:
        phones:
          type: array
          items:
            $ref: '#/components/schemas/Phone'
      required:
      - phones
    CustomerRegistrationResponse:
      properties:
        registration:
          description: Flag to indicate the registration of customer
          type: boolean
          example: true
      required:
      - registration
    CustomerTermsAndConditionsResponse:
      properties:
        acceptance:
          description: Flag to indicate the customer has accepted Terms and Conditions
          type: boolean
          example: true
      required:
      - acceptance
    CustomerResetPINResponse:
      properties:
        result:
          description: return the outcome of resetPINRequest
          type: string
          example: ok
      required:
      - result
    CustomerValidatePINResponse:
      properties:
        result:
          description: return the outcome of ValidatePINRequest
          enum:
          - match
          - donotmatch
          type: string
          example: donotmatch
      required:
      - result
    
    GenerateOTPResponse:
      type: object
      properties:
        maskedPhoneNumber:
          type: string
          description: The Customer's phone number having last four digits unmasked
          example: XXXXXXXX1234
  schemas:
    Email:
      properties:
        emailAddress:
          description: Updated email address of the customer
          type: string
          example: raam@lamma.om
        preferredEmailFlag:
          description: Flag to indicate the preferred email
          type: boolean
          example: true
        emailKey:
          description: Unique identifier of the email address
          type: integer
          example: 1
      required:
      - emailKey
      - emailAddress
      - preferredEmailFlag
    Alias:
      properties:
        aliasName:
          description: alias (mpClear) of the customer
          type: string
          example: raam@lamma.om
        preferredAliasFlag:
          description: Flag to indicate the preferred alias
          type: boolean
          example: true
        aliasKey:
          description: Unique identifier of the alias
          type: integer
          example: 1
      required:
      - aliasName
      - aliasKey
      - preferredAliasFlag
    Phone:
      properties:
        phoneType:
          description: The type of phone.This is a reference data field.
          type: string
          example: HOME_PHONE_NUMBER
        areaCode:
          description: Area code of telephone number
          type: string
          example: "02"
        extension:
          description: Extension of telephone number
          type: string
          example: 23
        phoneKey:
          description: Unique identifier of the phone number
          type: integer
          example: 1
        phoneNumber:
          description: The phone number of a customer
          type: string
          example: 427671760
        phoneCountryCode:
          description: Country calling code. This is a reference data field.
          type: string
          example: 61
      required:
      - phoneKey
      - phoneType
      - phoneNumber
      - phoneCountryCode
    IdentificationDocumentDetails:
      properties:
        idType:
          description: Type of Identification document. 
          type: string
          example: PASSPORT
        primaryIdFlag:
          description: 'Flag to mark primary identification document. Valid values:
            true and false'
          type: boolean
          example: true
        idNumber:
          description: 'Unique identifier of identification document. Ex: Passport Number'
          type: string
          example: S42258011
        idExpiryDate:
          description: Expiry date of identification document in ISO 8601 date format
            YYYY-MM-DD
          type: string
          format: date
          example: "2027-04-11"
        idIssueDate:
          description: Issuance date of identification document in ISO 8601 date format
            YYYY-MM-DD
          type: string
          format: date
          example: "2017-04-12"
        idIssuePlace:
          description: Identification document issuance place
          type: string
          example: Pune
        idIssueCountry:
          description: Country of issuance. This is a reference data field.
          type: string
          example: IN
    EmploymentDetails:
      properties:
        employerName:
          description: Applicant's employer name
          type: string
          example: Lamma
        employmentStatus:
          description: Status of the employment. This is a reference data field.
          type: string
          example: B
        occupationCode:
          description: Occupation code. This is a reference data field.
          type: string
          example: "104"
        employmentStartDate:
          description: Employment start date in ISO 8601 date format YYYY-MM-DD
          type: string
          format: date
          example: "2027-04-11"
        industryCode:
          description: Code of the industry of employment. This is a reference data
            field.
          type: string
          format: string
          example: "0100"
        emailAddress:
          description: Email Address
          type: string
          example: abc@xyz
    Name:
      properties:
        nameType:
          description: Type of the name. This is a reference data field. You can use nameType as the referenceCode
            parameter to retrieve the values.
          type: string
          example: LOCAL_NAME
        firstName:
          description: The first name of the customer. Also known as first name
          type: string
          example: Raam
        lastName:
          description: The last name of the customer. Also known as last name
          type: string
          example: Mishra
        fullName:
          description: Full name of the customer.
          type: string
          example: Raam Mishra
        middleName:
          description: Middle name of the customer.
          type: string
          example: Mohan
      required:
      - firstName
    ContactConsent:
      properties:
        okToCall:
          description: 'Customer''s consent for receiving phone calls. Valid values:
            true and false'
          type: boolean
          example: true
        okToMail:
          description: 'Customer''s consent for receiving mails. Valid values: true
            and false'
          type: boolean
          example: true
        okToEmail:
          description: 'Customer''s consent for receiving email. Valid values: true
            and false'
          type: boolean
          example: true
        okToSms:
          description: 'Customer''s consent for receiving sms. Valid values: true and
            false'
          type: boolean
          example: true
        okToPushNotification:
          description: 'Customer''s consent for push notification '
          type: boolean
          example: false
    CustomerParticulars:
      properties:
        names:
          type: array
          items:
            $ref: '#/components/schemas/Name'
        gender:
          description: Gender/Sex. Valid values are MALE, FEMALE for individual customer
            types and OTHERS for corporate customers. You can use gender as the referenceCode
            parameter to retrieve the values.
          type: string
        prefix:
          description: The prefix of the customer s name.
          type: string
          example: Mr.
        suffix:
          description: The suffix of the customer s name.
          type: string
          example: III
    Demographics:
      properties:
        placeOfBirth:
          description: Applicant's place of birth
          type: string
          example: Sydney
        countryOfBirth:
          description: Applicant's Country of birth. This is a reference data field.
          type: string
          example: IN
        residenceCountryCode:
          description: This field is to indicate the country of residence
          type: string
          example: OM
        nationality:
          description: Applicant's nationality. This is a reference data field.
          type: string
          example: IN
        maritalStatus:
          description: Applicant's marital status.
          type: string
          example: MARRIED
        residencyStatus:
          description: Indicate status of residence. This is a reference data field.
          type: string
          example: RENTED_HOUSE
        residenceType:
          description: Type of Residence. This is a reference data field.
          type: string
          example: CONDOMINIUM
        secondOtherNationalityCountryCode:
          description: Applicant's second nationality country code.
          type: string
          example: SG
        thirdOtherNationalityCountryCode:
          description: Applicant's second nationality country code.
          type: string
          example: MY
        fourthOtherNationalityCountryCode:
          description: Applicant's second nationality country code.
          type: string
          example: TH
        fifthOtherNationalityCountryCode:
          description: Applicant's second nationality country code.
          type: string
          example: ID
        domicileCountryCode:
          description: Domicile country code. This is a reference data field.
          type: string
          example: SG
    Address:
      properties:
        addressKey:
          description: Unique identifier of the address and it is mandatory in update
            customer address details
          type: integer
          example: 1
        city:
          description: City
          type: string
          example: Muscat
        addressType:
          description: Type of the address. This is a reference data field.
          type: string
          example: HOME_ADDRESS
        postalCode:
          description: Postal code the mailing address
          type: string
          example: Post Box 543
        addressline3:
          description: Address line3 of the mailing address
          type: string
          example: Ghala
        addressline2:
          description: Address line2 of the mailing address
          type: string
          example: Ghala
        addressline1:
          description: Address line1 of the mailing address
          type: string
          example: Post Box 56
        state:
          description: State. This is a reference data field.
          type: string
          example: Muscat
        countryName:
          description: Country Name.This is a reference data field. 
          type: string
          example: Oman
        addressline4:
          description: Address line3 of the mailing address
          type: string
          example: Muscat Oman
      required:
      - postalCode
      - countryName
      - addressType
    OBError1:
      type: "object"
      properties:
        ErrorCode:
          description: "Low level textual error code, e.g., UK.OBIE.Field.Missing"
          type: "string"
          x-namespaced-enum:
            - "UK.OBIE.Field.Expected"
            - "UK.OBIE.Field.Invalid"
            - "UK.OBIE.Field.InvalidDate"
            - "UK.OBIE.Field.Missing"
            - "UK.OBIE.Field.Unexpected"
            - "UK.OBIE.Header.Invalid"
            - "UK.OBIE.Header.Missing"
            - "UK.OBIE.Reauthenticate"
            - "UK.OBIE.Resource.ConsentMismatch"
            - "UK.OBIE.Resource.InvalidConsentStatus"
            - "UK.OBIE.Resource.InvalidFormat"
            - "UK.OBIE.Resource.NotFound"
            - "UK.OBIE.Rules.AfterCutOffDateTime"
            - "UK.OBIE.Rules.DuplicateReference"
            - "UK.OBIE.Signature.Invalid"
            - "UK.OBIE.Signature.InvalidClaim"
            - "UK.OBIE.Signature.Malformed"
            - "UK.OBIE.Signature.Missing"
            - "UK.OBIE.Signature.MissingClaim"
            - "UK.OBIE.Signature.Unexpected"
            - "UK.OBIE.UnexpectedError"
            - "UK.OBIE.Unsupported.AccountIdentifier"
            - "UK.OBIE.Unsupported.AccountSecondaryIdentifier"
            - "UK.OBIE.Unsupported.Currency"
            - "UK.OBIE.Unsupported.Frequency"
            - "UK.OBIE.Unsupported.LocalInstrument"
            - "UK.OBIE.Unsupported.Scheme"
        Message:
          description: "A description of the error that occurred. e.g., 'A mandatory field isn't supplied' or 'RequestedExecutionDateTime must be in future'\nOBIE doesn't standardise this field"
          type: "string"
          minLength: 1
          maxLength: 500
        Path:
          description: "Recommended but optional reference to the JSON Path of the field with error, e.g., Data.Initiation.InstructedAmount.Currency"
          type: "string"
          minLength: 1
          maxLength: 500
        Url:
          description: "URL to help remediate the problem, or provide more information, or to API Reference, or help etc"
          type: "string"
      required:
        - "ErrorCode"
        - "Message"
      additionalProperties: false
      minProperties: 1
    OBErrorResponse1:
      description: "An array of detail error codes, and messages, and URLs to documentation to help remediation."
      type: "object"
      properties:
        Code:
          description: "High level textual error code, to help categorize the errors."
          type: "string"
          minLength: 1
          maxLength: 40
        Id:
          description: "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors."
          type: "string"
          minLength: 1
          maxLength: 40
        Message:
          description: "Brief Error message, e.g., 'There is something wrong with the request parameters provided'"
          type: "string"
          minLength: 1
          maxLength: 500
        Errors:
          items:
            $ref: "#/components/schemas/OBError1"
          type: "array"
          minItems: 1
      required:
        - "Code"
        - "Message"
        - "Errors"
      additionalProperties: false
    CustomerEmailUpdateRequest:
      properties:
        email:
          type: array
          items:
            $ref: '#/components/schemas/Email'
      required:
      - email
    CustomerAliasUpdateRequest:
      properties:
        alias:
          type: array
          items:
            $ref: '#/components/schemas/Alias'
      required:
      - alias
    CustomerTermsAndConditionsUpdateRequest:
      properties:
        acceptance:
          description: Flag to indicate the acceptance of terms and conditions by Customer
          type: boolean
          example: true
      required:
      - acceptance
    CustomerResetPINRequest:
      properties:
        pin:
          description: PIN encrypted value as per PCI-DSS (3DES)
          type: string
          example: 0786
      required:
      - pin
    CustomerValidatePINRequest:
      properties:
        pin:
          description: PIN encrypted value as per PCI-DSS (3DES)
          type: string
          example: 0786
      required:
      - pin
    CustomerProfileUpdateRequest:
      properties:
        addressList:
          type: array
          items:
            $ref: '#/components/schemas/Address'
        emails:
          type: array
          items:
            $ref: '#/components/schemas/Email'
        phones:
          type: array
          items:
            $ref: '#/components/schemas/Phone'
        customerParticulars:
          $ref: '#/components/schemas/CustomerParticulars'
        demographics:
          $ref: '#/components/schemas/Demographics'
        contactConsent:
          $ref: '#/components/schemas/ContactConsent'
        identificationDocumentDetails:
          type: array
          items:
            $ref: '#/components/schemas/IdentificationDocumentDetails'
        employmentDetails:
          type: array
          items:
            $ref: '#/components/schemas/EmploymentDetails'
        documentId:
          description: Document ID generated by document storage system during document upload
          type: string
          example: 0902684B802480029
    CustomerAddressUpdateRequest:
      properties:
        address:
          type: array
          items:
            $ref: '#/components/schemas/Address'
      required:
      - address
    CustomerPhoneUpdateRequest:
      properties:
        phone:
          type: array
          items:
            $ref: '#/components/schemas/Phone'
      required:
      - phone
    CustomerEmailUpdateConfirmationRequest:
      properties:
        controlFlowId:
          description: Control Flow Id
          type: string
          example: 6e3774334f724a2b7947663653712f52456f524c41797038516a59347a437549564a77755676376e616a733d
      required:
      - controlFlowId
    CustomerPhoneUpdateConfirmationRequest:
      properties:
        controlFlowId:
          description: Control Flow Id
          type: string
          example: 6e3774334f724a2b7947663653712f52456f524c41797038516a59347a437549564a77755676376e616a733d
      required:
      - controlFlowId
    GenerateOTPRequest:
      required:
      - otpDeliveryOption
      type: object
      properties:
        otpDeliveryOption:
          type: string
          description: Method of OTP(one time PIN) delivery. The possible values are
            SMS, SOFTTOKEN, HARDTOKEN, VOICE, VRU, EMAIL
          example: SMS
        interdictionId:
          type: string
          description: The identifier used to retrieve phone number of the user from
            cache for which OTP needs to be delivered
          example: "1111214678"
        transactionType:
          type: string
          description: 'The string representing the transaction flow Eg: SIGNON, ADD_PAYEE'
          example: SIGNON
        controlFlowId:
          description: Control Flow Id
          type: string
          example: 6e3774334f724a2b7947663653712f52456f524c41797038516a59347a437549564a77755676376e616a733d
        emailAddress:
          description: Email address of the customer
          type: string
          example: raam@lamma.om
        messageCode:
          description: The alert code that is used by LammaAlerts to send alerts to customers.
          type: string
          example: LAMMAVRFY
    ValidateOTPRequest:
      required:
      - otpDeliveryOption
      - otpToken
      type: object
      properties:
        otpDeliveryOption:
          type: string
          description: Method of OTP(one time PIN) delivery. This is a reference data
            field.
          example: SMS
        otpToken:
          type: string
          description: The encrypted OTP Token.
          example: hQEMA8pL8pXB67DjAQf+lI1CnFXuF/
        transactionMemo:
          description: Type of the specific transaction. This is a reference data field.
          type: string
          example: ENROLLCARD
        controlFlowId:
          description: It is used to control the flow for subsequent requests in the
            session.
          type: string
          example: 6e3774334f724a2b7947663653712f52456f524c41797038516a59347a437549564a77755676376e616a733d
    Card:
      description: |-
        You can store multiple cards on a customer in order to ease top up later.
      properties:
        address_city:
          description: City/District/Suburb/Town/Village.
          maxLength: 5000
          nullable: true
          type: string
        address_country:
          description: Billing address country, if provided when creating card.
          maxLength: 5000
          nullable: true
          type: string
        address_line1:
          description: Address line 1 (Street address/PO Box/Company name).
          maxLength: 5000
          nullable: true
          type: string
        address_line1_check:
          description: 'If `address_line1` was provided, results of the check: `pass`,
            `fail`, `unavailable`, or `unchecked`.'
          maxLength: 5000
          nullable: true
          type: string
        address_line2:
          description: Address line 2 (Apartment/Suite/Unit/Building).
          maxLength: 5000
          nullable: true
          type: string
        address_state:
          description: State/County/Province/Region.
          maxLength: 5000
          nullable: true
          type: string
        address_zip:
          description: ZIP or postal code.
          maxLength: 5000
          nullable: true
          type: string
        address_zip_check:
          description: 'If `address_zip` was provided, results of the check: `pass`,
            `fail`, `unavailable`, or `unchecked`.'
          maxLength: 5000
          nullable: true
          type: string
        available_payout_methods:
          description: A set of available payout methods for this card. Only values
            from this set should be passed as the `method` when creating a payout.
          items:
            enum:
            - instant
            - standard
            type: string
          nullable: true
          type: array
        brand:
          description: Card brand. Can be `MasterCard`, `Visa`, or `Unknown`.
          maxLength: 5000
          type: string
        country:
          description: Two-letter ISO code representing the country of the card. You
            could use this attribute to get a sense of the international breakdown
            of cards you've collected.
          maxLength: 5000
          nullable: true
          type: string
        currency:
          description: Three-letter [ISO code for currency].
            Only applicable on accounts (not customers or recipients). The card can
            be used as a transfer destination for funds in this currency.
          nullable: true
          type: string
        customer:
          anyOf:
          - maxLength: 5000
            type: string
          - "$ref": "#/components/schemas/Customer"
          - "$ref": "#/components/schemas/deleted_customer"
          description: The customer that this card belongs to.
          nullable: true
          x-expansionResources:
            oneOf:
            - "$ref": "#/components/schemas/Customer"
            - "$ref": "#/components/schemas/Deleted_Customer"
        cvc_check:
          description: 'If a CVC was provided, results of the check: `pass`, `fail`,
            `unavailable`, or `unchecked`. A result of unchecked indicates that CVC
            was provided but hasn''t been checked yet. Checks are typically performed
            when attaching a card to a Customer object, or when creating a charge.'
          maxLength: 5000
          nullable: true
          type: string
        default_for_currency:
          description: Whether this card is the default external account for its currency.
          nullable: true
          type: boolean
        dynamic_last4:
          description: "(For tokenized numbers only.) The last four digits of the
            device account number."
          maxLength: 5000
          nullable: true
          type: string
        exp_month:
          description: Two-digit number representing the card's expiration month.
          type: integer
        exp_year:
          description: Four-digit number representing the card's expiration year.
          type: integer
        fingerprint:
          description: |-
            Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
          maxLength: 5000
          nullable: true
          type: string
        funding:
          description: Card funding type. Can be `credit`, `debit`, `prepaid`, or
            `unknown`.
          maxLength: 5000
          type: string
        id:
          description: Unique identifier for the object.
          maxLength: 5000
          type: string
        last4:
          description: The last four digits of the card.
          maxLength: 5000
          type: string
        metadata:
          additionalProperties:
            maxLength: 500
            type: string
          description: Set of [key-value pairs]
            that you can attach to an object. This can be useful for storing additional
            information about the object in a structured format.
          nullable: true
          type: object
        name:
          description: Cardholder name.
          maxLength: 5000
          nullable: true
          type: string
        object:
          description: String representing the object's type. Objects of the same
            type share the same value.
          enum:
          - card
          type: string
        tokenization_method:
          description: If the card number is tokenized, this is the method that was
            used. Can be `android_pay` (includes Google Pay), `apple_pay`, `masterpass`,
            `visa_checkout`, or null.
          maxLength: 5000
          nullable: true
          type: string
      required:
      - brand
      - exp_month
      - exp_year
      - funding
      - id
      - last4
      - object
      title: Card
      type: object
      x-expandableFields:
      - customer
      x-resourceId: card
    Customer:
      description: |-
        `Customer` objects allow you to maintain customer details, and to track
        transcation and charges, that are associated with the same customer. The API allows
        you to create, delete, and update customers. You can retrieve individual
        customers as well as a list of all customers.

      properties:
        address:
          anyOf:
          - "$ref": "#/components/schemas/Address"
          description: The customer's address.
          nullable: true
        balance:
          description: Current balance, if any, being stored on the eWallet.
          type: integer
        created:
          description: Time at which the object was created. Measured in seconds since
            the Unix epoch.
          format: unix-time
          type: integer
        currency:
          description: Three-letter [ISO code for the currency]
            the customer can be charged in for recurring billing purposes.
          maxLength: 5000
          nullable: true
          type: string
        default_source:
          anyOf:
          - maxLength: 5000
            type: string
          - "$ref": "#/components/schemas/Bank_Account"
          - "$ref": "#/components/schemas/MPClear"
          - "$ref": "#/components/schemas/Card"
          description: |-
            ID of the default payment source for the customer.
          nullable: true
          x-expansionResources:
            oneOf:
            - "$ref": "#/components/schemas/Bank_Account"
            - "$ref": "#/components/schemas/MPClear"
            - "$ref": "#/components/schemas/Card"
        
        description:
          description: An arbitrary string attached to the object. Often useful for
            displaying to users.
          maxLength: 5000
          nullable: true
          type: string
        email:
          description: The customer's email address.
          maxLength: 5000
          nullable: true
          type: string
        id:
          description: Unique identifier for the object.
          maxLength: 5000
          type: string
        livemode:
          description: Has the value `true` if the object exists in live mode or the
            value `false` if the object exists in test mode.
          type: boolean
        metadata:
          additionalProperties:
            maxLength: 500
            type: string
          description: Set of [key-value pairs]
            that you can attach to an object. This can be useful for storing additional
            information about the object in a structured format.
          type: object
        name:
          description: The customer's full name.
          maxLength: 5000
          nullable: true
          type: string
        object:
          description: String representing the object's type. Objects of the same
            type share the same value.
          enum:
          - Customer
          type: string
        phone:
          description: The customer's phone number.
          maxLength: 5000
          nullable: true
          type: string
        preferred_locales:
          description: The customer's preferred locales (languages), ordered by preference.
          items:
            maxLength: 5000
            type: string
          nullable: true
          type: array
        
      required:
      - created
      - id
      - livemode
      title: Customer
      type: object
      x-expandableFields:
      - address
      - default_source
      x-resourceId: Customer
    Deleted_Customer:
      description: ''
      properties:
        deleted:
          description: Always true for a deleted object
          enum:
          - true
          type: boolean
        id:
          description: Unique identifier for the object.
          maxLength: 5000
          type: string
        object:
          description: String representing the object's type. Objects of the same
            type share the same value.
          enum:
          - Customer
          type: string
      required:
      - deleted
      - id
      - object
      title: DeletedCustomer
      type: object
      x-expandableFields: []
      x-resourceId: Deleted_Customer
    